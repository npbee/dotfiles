snippet cl
abbr cl
options word
  console.log(${0:TARGET})

snippet const
options head
  const ${1:THING} = "$1";

snippet /**
options head
  /**
   * ${0:#:description}
   */

# React Component Class
snippet rcc
abbr React Component Class
options indent
  import * as React from 'react';

  class ${1:ComponentName} extends React.Component {
        render() {
                return <${2:div}>$1</$2>;
        }
  }

  export default $1;

snippet rcf
abbr React Component Function
options head
  function ${1:ComponentName}(props) {
  return <${2:div}>$1</$2>;
  }

snippet rcm
abbr React Component Module
options head
  import * as React from 'react';

  export default function ${1:ComponentName}(props) {
  return <${2:div}>$1</$2>;
  }

snippet bind
abbr Bind React Method
options head
  this.${1:method} = this.$1.bind(this);

snippet construct
abbr React Constructor
options head
  constructor(props) {
      super(props);

      ${1}
  }


snippet fela
abbr fela
options head
  const ${1:ComponentName} = createComponent(function $1({ theme }) {
      return {
          ${2}
      }
  })


snippet lorem
abbr lorem
options head
  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec in facilisis nibh, at porta quam. Vestibulum pretium urna augue. Aenean mi risus, gravida non elit eget, semper rutrum sapien. Phasellus non felis in augue lacinia accumsan in eu diam. Sed efficitur fringilla neque ac efficitur. Aenean nec suscipit eros. Etiam pretium vel quam sed feugiat. Morbi sed pellentesque nulla, non feugiat ante. Curabitur urna mi, tempus in turpis eu, interdum venenatis nisi. Ut feugiat nisl ligula, in vestibulum eros malesuada quis. Nam mattis vestibulum nibh a convallis. Suspendisse porttitor ex vel vehicula hendrerit.


snippet wdyu
abbr Why Did You Update
options head
  function useWhyDidYouUpdate(name, props) {
    // Get a mutable ref object where we can store props ...
    // ... for comparison next time this hook runs.
    const previousProps = React.useRef();

    React.useEffect(() => {
      if (previousProps.current) {
        // Get all keys from previous and current props
        const allKeys = Object.keys({ ...previousProps.current, ...props });
        // Use this object to keep track of changed props
        const changesObj = {};
        // Iterate through keys
        allKeys.forEach(key => {
          // If previous is different from current
          if (previousProps.current[key] !== props[key]) {
            // Add to changesObj
            changesObj[key] = {
              from: previousProps.current[key],
              to: props[key]
            };
          }
        });

        // If changesObj not empty then output to console
        if (Object.keys(changesObj).length) {
          console.log('[why-did-you-update]', name, changesObj);
        }
      }

      // Finally update previousProps with current props for next hook call
      previousProps.current = props;
    });
  }
