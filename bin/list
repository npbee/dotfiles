#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const homedir = require("os").homedir();
const { promisify } = require("util");

const exec = promisify(require("child_process").exec);
const spawn = promisify(require("child_process").spawn);

const exists = promisify(fs.access);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

let [listName, cmd, title, ...rest] = process.argv.slice(2);

const dir = path.join(homedir, "Dropbox/jrnl/lists");
const file = path.join(dir, `${listName}.md`);

async function init() {
  try {
    await exists(file);
  } catch (err) {
    console.log("no file");
    // make file
  }

  try {
    await run(file, cmd, title, ...rest);
  } catch (err) {
    console.error(err);
  }
}

async function run(filePath, cmd, title, ...rest) {
  switch (cmd) {
    case "add": {
      await insert(filePath, {
        title,
        "date added": date(),
        "date updated": date(),
      });

      console.log("[DONE]");
      await print(file);
      break;
    }
    case "finish": {
      let id = title;
      let result = await update(filePath, id, {
        "date completed": date(),
        "date updated": date(),
      });
      console.log("[DONE]");
      await print(file);
      break;
    }
    default: {
      print(file);
    }
  }
}

init();

function date() {
  var date = new Date("2013-03-10T02:00:00Z");
  return date.toISOString().substring(0, 10);
}

async function insert(filePath, data) {
  let { title, "date added": dateAdded, "date updated": dateUpdated } = data;

  let { rows, contents, lines } = await parse(filePath);

  if (rows.find(row => row.data.title === title)) {
    console.log("Already exists");
    return;
  }

  let cnt = lines.length;
  let newLine = `|${rows.length + 1}|${title}|${dateAdded}|${dateUpdated}||`;

  lines[cnt - 1] = newLine;

  const newTable = await maybeFormat(lines.join("\n"));

  await writeFile(file, newTable, "utf8");

  return newTable;
}

async function update(filePath, id, data) {
  let { dateAdded, dateUpdated } = data;
  let { rows, contents, lines } = await parse(filePath);
  const toUpdate = rows.find(row => row.data.id === id);

  if (!toUpdate) {
    console.log(`Couldn't find row with id ${id}`);
    return;
  }

  for (let [key, val] of Object.entries(data)) {
    if (toUpdate.data[key] !== undefined) {
      toUpdate.data[key] = val;
    }
  }

  lines[toUpdate.idx] = Object.values(toUpdate.data).join("|");

  const newTable = await maybeFormat(lines.join("\n"));

  await writeFile(file, newTable, "utf8");

  return newTable;
}

async function parse(filePath) {
  let contents = await readFile(filePath, "utf8");
  let lines = contents.split(/\r?\n/);
  let separatorIdx = lines.findIndex(l => l.startsWith("| --"));
  let rows = lines.slice(separatorIdx + 1);
  let header = lines
    .slice(separatorIdx - 1, separatorIdx)[0]
    .split("|")
    .filter(Boolean)
    .map(str => str.trim());
  return {
    rows: rows.filter(Boolean).map(row => {
      let data = {};
      const rowData = row
        .split("|")
        .filter(Boolean)
        .map(str => str.trim());

      for (let [idx, key] of header.entries()) {
        data[key] = rowData[idx];
      }

      return {
        idx: lines.indexOf(row),
        data,
      };
    }),
    lines,
    contents,
  };
}

async function maybeFormat(source) {
  try {
    let { stdout, stderr } = await exec(
      `echo "${source}" | prettier --stdin-filepath file.md`
    );
    if (stdout) {
      return stdout;
    } else {
      return source;
    }
  } catch (err) {
    return source;
  }
}

async function print(file) {
  try {
    let { stdout, stderr } = await spawn(`bat`, [file], {
      stdio: "inherit",
    });
  } catch (err) {
    let { stdout, stderr } = await spawn(`cat`, [file], {
      stdio: "inherit",
    });
  }
}

/*
# if [ "$#" -eq 2 ]; then
#   echo "- $2" >> ~/Dropbox/jrnl/lists/$1.md
#   echo "Done. Added '$2' to list '$1'"
#   tail ~/Dropbox/jrnl/lists/$1.md
# else
#   nvim ~/Dropbox/jrnl/lists/$1.md
# fi
*/
