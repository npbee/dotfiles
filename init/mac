#!/usr/bin/env bash
set -e

export DOTFILES=$HOME/dotfiles

# Bring in some colors
source init/logger

is_mac() {
    [[ "$OSTYPE" =~ ^darwin ]] || return 1
}

append_to_zshrc() {
  fancy_echo 'Setting up $PATH in zshrc'
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}


# Uses the local template and copies it into the `link` folder so that we can
# ignore potentially private git things
setup_git() {
    if ! [ -f gitconfig.local ]
    then
        info "Setting up local git config"

        git_credential='cache'
        if is_mac
        then
            git_credential='osxkeychain'
        fi

        user 'What is your github author name?'
        read -e git_authorname
        user 'What is your github author email?'
        read -e git_authoremail

        sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" init/template/gitconfig.local > gitconfig.local

        success 'Local git config complete.'
    fi
}

# HOMEBREW
setup_homebrew() {
    info "Installing Homebrew"
    if test ! $(which /usr/local/bin/brew)
    then
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        export PATH="/usr/local/bin:$PATH"
    else
        success "Homebrew already installed."
    fi

    brew update --force

    brew bundle --file=-<<EOF
    cask_args appdir: '/Applications'

    tap 'homebrew/bundle'
    tap 'thoughtbot/formulae'
    tap "universal-ctags/universal-ctags"
    tap "caskroom/cask"

    brew "universal-ctags", args: ["HEAD"]
    brew "bat"
    brew "git"
    brew "go"
    brew "hub"
    brew "python"
    brew "python3"
    brew "rcm"
    brew "ruby"
    brew "ripgrep"
    brew "tree"
    brew "zsh"
    brew "direnv"
    brew "neovim"
    brew "watchman"

    cask "1password"
    cask "alfred"
    cask "dash"
    cask "flux"
    cask "spectacle"
    cask "kitty"
    cask "keyboard-maestro"
EOF
}

# Zsh
zsh() {
    info "Installing zsh syntax highlighting"
    if ! [ -d zsh/plugins/zsh-syntax-highlighting ]
    then
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git zsh/plugins/zsh-syntax-highlighting
    else
        success "Syntax highlighting already installed."
    fi

    info "Installing zsh autosuggestion"
    if ! [ -d zsh/plugins/zsh-autosuggestions ]
    then
        git clone git://github.com/zsh-users/zsh-autosuggestions zsh/plugins/zsh-autosuggestions
    else
        success "ZSH autosuggestions already installed."
    fi

    info "Installing z"
    if ! [ -d zsh/plugins/z ]
    then
        git clone git@github.com:rupa/z.git zsh/plugins/z
    else
        success "Z already installed."
    fi

    info "Intalling spaceship prompt"
    if ! [ -d zsh/plugins/spaceship ]
    then
      git clone https://github.com/denysdovhan/spaceship-prompt.git zsh/plugins/spaceship-prompt
    else
      success "Spaceship prompt already installed"
    fi
}

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  info "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    info "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

change_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  info "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    info "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

# pip
do_python() {
    info "Installing neovim via Python3"
    pip3 install neovim
    success "Done!"
}

link_files() {
    info "Linking dotfiles"
    rcup -x init -x readme.md
}

osx_defaults() {
    if [ ! -d "$HOME/.bin/" ]; then
      mkdir "$HOME/.bin"
    fi
    info "Setting system defaults"
    $HOME/.bin/osx
}

link_nvim() {
    info "Linking vim files to nvim"
    if ! [ -d ~/.config ]
    then
        mkdir $HOME/.config
    fi
    if ! [ -e ~/.config/nvim/.vim ]
    then
      ln -s ~/.vim ~/.config/nvim
      ln -s ~/.vimrc ~/.config/nvim/init.vim
    fi
}

terminfo() {
    info "Terminfo"
    tic ./internal/terminfo/xterm-256color-italic.terminfo
}

clean_up() {
    success "Done!  Run 'source ~/.zshrc' to see changes."
}

setup_git
#setup_homebrew
do_python
zsh
change_shell
link_files
osx_defaults
link_nvim
terminfo
clean_up
